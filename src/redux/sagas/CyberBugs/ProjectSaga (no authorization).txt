import {
    fork,
    take,
    takeEvery,
    delay,
    takeLatest,
    select,
    call,
    put,
  } from "redux-saga/effects";
  import { cyberbugsService } from './../../../services/CyberbugsService';
import { STATUS_CODE } from './../../../util/constants/settingSystem';
import { DISPLAY_LOADING, HIDE_LOADING } from "./../../constants/LoadingConst";

import { GET_ALL_PROJECT_CATEGORY_SAGA, GET_ALL_PROJECT_CATEGORY } from './../../constants/Cyberbugs/Cyberbugs';




function * createProjectSaga (action) {
    console.log("action createProjectSaga", action);

    yield put({
        type: DISPLAY_LOADING,
      });
    
    yield delay(2000);

    try {
        
        //gọi api bằng yield call, hàm call nhận vào 1 callback function mà trả về promise
        const {data, status} = yield call(() => {
            return cyberbugsService.createProject(action.newProject);
        });

        // console.log("data saga", data);
        
        if(status === STATUS_CODE.SUCCESS) {
           console.log("thành công rùi nè", data)
        }

    } catch(err) {
        console.log("error", err.response.data);
    }


    //call api thành công or thất bại thi đều tắt loading
    yield put({
        type: HIDE_LOADING,
      });

;}






export function* theoDoicreateProjectSaga() {
    yield takeLatest('CREATE_PROJECT_SAGA', createProjectSaga);
  }
  